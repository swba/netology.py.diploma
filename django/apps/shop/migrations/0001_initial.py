# Generated by Django 5.2.6 on 2025-10-07 10:14

import apps.base.models
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_deleted', models.BooleanField(default=False)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('title', models.CharField(max_length=255, verbose_name='Title')),
                ('slug', models.SlugField(verbose_name='Slug')),
            ],
            options={
                'verbose_name': 'Product Category',
                'verbose_name_plural': 'Product Categories',
                'ordering': ('title',),
                'constraints': [models.UniqueConstraint(fields=('slug',), name='unique_category')],
            },
        ),
        migrations.CreateModel(
            name='Seller',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_deleted', models.BooleanField(default=False)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('title', models.CharField(max_length=255, verbose_name='Title')),
                ('website_url', models.URLField(blank=True, null=True, verbose_name='Website URL')),
                ('business_info', models.TextField(verbose_name='Business Information')),
                ('is_active', models.BooleanField(help_text='Whether the seller is active and accepts orders.', verbose_name='Activity Status')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sellers', to=settings.AUTH_USER_MODEL, verbose_name='Seller')),
            ],
            options={
                'verbose_name': 'Seller Profile',
                'verbose_name_plural': 'Seller Profiles',
                'ordering': ('-created_at',),
            },
        ),
        migrations.CreateModel(
            name='Product',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_deleted', models.BooleanField(default=False)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('title', models.CharField(max_length=255, verbose_name='Title')),
                ('slug', models.SlugField(verbose_name='Slug')),
                ('external_id', models.PositiveBigIntegerField(blank=True, null=True, verbose_name='External ID')),
                ('model', models.CharField(blank=True, default='', max_length=255, verbose_name='Model')),
                ('quantity', models.PositiveIntegerField(default=0, verbose_name='Quantity')),
                ('price', models.PositiveIntegerField(verbose_name='Price')),
                ('list_price', models.PositiveIntegerField(verbose_name='List Price')),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='products', to='shop.category', verbose_name='Category')),
                ('seller', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='products', to='shop.seller', verbose_name='Seller')),
            ],
            options={
                'verbose_name': 'Product',
                'verbose_name_plural': 'Products',
                'ordering': ('title',),
            },
        ),
        migrations.CreateModel(
            name='ShippingAddress',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_deleted', models.BooleanField(default=False)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('full_name', models.CharField(help_text="Full recipient's name.", max_length=255, verbose_name='Full Name')),
                ('phone_number', apps.base.models.PhoneField(blank=True, default='', help_text='Phone number in international format, e.g. +79991112233.', max_length=14, verbose_name='Phone Number')),
                ('street_address', models.CharField(help_text='Includes the building name/number and street name, as well as apartment or unit number.', max_length=255, verbose_name='Street Address')),
                ('locality', models.CharField(help_text='The city, town, or village where the address is located.', max_length=255, verbose_name='Locality')),
                ('administrative_area', models.CharField(blank=True, default='', help_text='A larger administrative area such as a state, province, region, or district.', max_length=255, verbose_name='Administrative Area')),
                ('postal_code', models.CharField(help_text='A numeric or alphanumeric code for mail sorting and delivery.', max_length=10, verbose_name='Postal Code')),
                ('country', models.CharField(help_text='The name of the destination country.', max_length=100, verbose_name='Country')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='shipping_addresses', to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name': 'Shipping Address',
                'verbose_name_plural': 'Shipping Addresses',
                'ordering': ('-created_at',),
            },
        ),
        migrations.CreateModel(
            name='Order',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_deleted', models.BooleanField(default=False)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('status', models.CharField(choices=[('Pending', 'Pending'), ('Confirmed', 'Confirmed'), ('Shipping', 'Shipping'), ('Completed', 'Completed'), ('Canceled', 'Canceled')], default='Pending', max_length=10)),
                ('seller', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='orders', to='shop.seller', verbose_name='Seller')),
                ('shipping_address', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='orders', to='shop.shippingaddress', verbose_name='Shipping Address')),
            ],
            options={
                'verbose_name': 'Order',
                'verbose_name_plural': 'Orders',
                'ordering': ('-created_at',),
            },
        ),
        migrations.CreateModel(
            name='OrderLineItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.PositiveIntegerField(default=1, verbose_name='Quantity')),
                ('order', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='line_items', to='shop.order', verbose_name='Order')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='shop.product', verbose_name='Product')),
            ],
            options={
                'verbose_name': 'Order Line Item',
                'verbose_name_plural': 'Order Line Items',
                'constraints': [models.UniqueConstraint(fields=('order', 'product'), name='unique_order_product')],
            },
        ),
        migrations.CreateModel(
            name='CartLineItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.PositiveIntegerField(default=1, verbose_name='Quantity')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='cart', to=settings.AUTH_USER_MODEL, verbose_name='User')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='shop.product', verbose_name='Product')),
            ],
            options={
                'verbose_name': 'Cart Line Item',
                'verbose_name_plural': 'Cart Line Items',
                'constraints': [models.UniqueConstraint(fields=('user', 'product'), name='unique_user_product')],
            },
        ),
        migrations.CreateModel(
            name='ProductParameter',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, verbose_name='Name')),
                ('value', models.CharField(max_length=100, verbose_name='Value')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='parameters', to='shop.product', verbose_name='Product')),
            ],
            options={
                'verbose_name': 'Product Parameter',
                'verbose_name_plural': 'Product Parameters',
                'ordering': ('name',),
                'constraints': [models.UniqueConstraint(fields=('product', 'name'), name='unique_product_parameter')],
            },
        ),
        migrations.AddConstraint(
            model_name='product',
            constraint=models.UniqueConstraint(fields=('category', 'slug'), name='unique_product'),
        ),
    ]
